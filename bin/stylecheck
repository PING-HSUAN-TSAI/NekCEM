#!/usr/bin/env python
from __future__ import division, print_function, absolute_import

import sys
import os
import re
# Use the old optparse module so that everything works on Python 2.6
import optparse

INDENT_PATTERN = re.compile(' *((if.*then)|(IF.*THEN)|elseif|ELSEIF'
                            '|else|ELSE|do|DO)')
DEDENT_PATTERN = re.compile(' *(endif|ENDIF|elseif|ELSEIF|else|ELSE'
                            '|enddo|ENDDO)')
SKIP_PATTERN = re.compile('( *[0-9]+ +|[cC#]| *!| *\$)')


def check(fname):
    badlines, goodlines = [], []
    with open(fname) as f:
        spacedepth = 6
        for i, line in enumerate(f, start=1):
            if SKIP_PATTERN.match(line):
                goodlines.append(line)
                continue
            else:
                line = line.rstrip('\n')

            if DEDENT_PATTERN.match(line):
                spacedepth -= 3

            if line != line.rstrip():
                badlines.append((fname, i, 'trailing whitespace'))
            leadingspaces = len(line) - len(line.lstrip(' '))
            if line.rstrip() != '' and leadingspaces != spacedepth:
                badlines.append((fname, i, 'improper indentation'))
            if line:
                goodlines.append(spacedepth*' ' + line.strip() + '\n')
            else:
                goodlines.append('\n')

            if INDENT_PATTERN.match(line):
                spacedepth += 3
    return badlines, goodlines


def main():
    parser = optparse.OptionParser()
    parser.add_option('--fixup', action='store_true',
                      help=('try to fix any formatting issues. The'
                            ' original file will be backed up as'
                            ' <file>.old'))
    opts, args = parser.parse_args()
    fixup = opts.fixup

    badlines = []
    for fname in args:
        bad, good = check(fname)
        badlines.extend(bad)
        if fixup:
            os.rename(fname, fname + '.old')
            with open(fname, 'w') as f:
                f.writelines(good)

    for line in badlines:
        print("{}: {}: {}".format(*line))
    if badlines:
        exit(1)
    else:
        exit(0)


if __name__ == '__main__':
    main()
